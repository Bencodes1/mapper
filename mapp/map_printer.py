import random 
import time
from PIL import Image, ImageColor
from colour import Color


# ele_grid = [[1210, 1246, 1271, 1314, 1376, 1445, 1541, 1559, 1583, 1558, 1598, 1627, 1648, 1667, 1622, 1609, 1720, 1840, 1684, 1595, 1610, 1647, 1639, 1700, 1643, 1576, 1471, 1402, 1413, 1375, 1336, 1369], [1209, 1259, 1265, 1337, 1542, 1569, 1582, 1577, 1630, 1662, 1654, 1688, 1732, 1717, 1736, 1719, 1863, 1848, 1661, 1693, 1751, 1733, 1757, 1739, 1755, 1648, 1558, 1543, 1466, 1454, 1399, 1436], [1267, 1310, 1307, 1477, 1668, 1676, 1659, 1660, 1692, 1744, 1753, 1773, 1804, 1813, 1837, 1785, 1932, 1928, 1815, 1796, 1842, 1839, 1800, 1767, 1660, 1591, 1628, 1607, 1538, 1497, 1495, 1478], [1325, 1389, 1460, 1518, 1663, 1791, 1863, 1801, 1784, 1840, 1865, 1909, 1907, 1963, 1952, 1931, 2089, 1956, 1956, 1955, 1919, 1865, 1892, 1799, 1759, 1656, 1693, 1686, 1726, 1705, 1564, 1485], [1342, 1440, 1492, 1561, 1699, 1842, 1944, 1875, 1846, 1907, 1948, 1978, 2004, 2036, 2038, 2081, 2106, 2084, 2018, 2072, 2021, 1928, 1930, 1910, 1839, 1749, 1774, 1757, 1781, 1692, 1522, 1586], [1394, 1444, 1480, 1565, 1667, 1946, 1987, 1993, 1981, 1958, 2018, 2067, 2079, 2095, 2114, 2180, 2389, 2264, 2192, 2116, 2098, 2055, 2036, 1990, 1910, 1972, 1915, 1879, 1824, 1618, 1602, 1644], [1438, 1487, 1515, 1703, 1916, 2026, 2049, 2075, 2087, 2076, 2100, 2118, 2120, 2171, 2217, 2244, 2299, 2359, 2235, 2301, 2245, 2140, 2120, 2074, 2006, 1971, 1966, 1836, 1698, 1639, 1752, 1718], [1496, 1573, 1587, 1658, 1899, 2070, 2090, 2077, 2114, 2161, 2180, 2206, 2209, 2259, 2292, 2321, 2439, 2378, 2420, 2462, 2326, 2249, 2173, 2114, 2109, 2045, 1981, 1898, 1730, 1834, 1824, 1784], [1583, 1584, 1642, 1723, 1794, 1898, 2004, 2080, 2194, 2225, 2280, 2376, 2361, 2408, 2446, 2425, 2479, 2447, 2416, 2385, 2327, 2293, 2306, 2214, 2158, 2091, 2045, 1838, 1968, 1937, 1880, 1859], [1604, 1657, 1662, 1771, 1845, 1946, 2042, 2081, 2209, 2309, 2318, 2427, 2523, 2575, 2639, 2523, 2553, 2534, 2561, 2498, 2415, 2372, 2421, 2289, 2204, 2095, 1954, 1962, 2028, 1964, 1918, 1886], [1646, 1713, 1764, 1857, 1959, 2096, 2171, 2269, 2267, 2336, 2427, 2483, 2550, 2755, 2754, 2701, 2747, 2741, 2718, 2675, 2541, 2531, 2472, 2328, 2154, 2067, 1972, 2139, 2061, 2007, 1942, 1916], [1675, 1750, 1794, 1904, 1997, 2182, 2307, 2433, 2419, 2530, 2669, 2821, 2787, 2816, 2897, 2907, 3097, 3001, 2868, 2762, 2519, 2389, 2411, 2352, 2236, 2253, 2252, 2161, 2082, 2014, 1957, 1943], [1731, 1783, 1828, 1944, 2070, 2203, 2347, 2484, 2628, 2747, 2869, 3048, 3068, 3016, 3141, 3206, 3333, 3315, 3095, 2736, 2786, 2690, 2574, 2461, 2481, 2352, 2283, 2177, 2101, 2043, 2015, 1965], [1747, 1826, 1856, 2021, 2153, 2240, 2350, 2505, 2631, 2861, 2928, 3006, 3145, 3360, 3372, 3601, 3452, 3286, 3212, 3159, 2993, 2831, 2690, 2750, 2453, 2347, 2285, 2185, 2142, 2083, 2009, 1956], [1783, 1860, 1918, 2011, 2107, 2222, 2431, 2525, 2687, 2874, 3096, 3082, 3274, 3472, 3631, 3745, 3653, 3474, 3477, 3347, 3077, 2934, 2811, 2602, 2477, 2371, 2310, 2243, 2203, 2109, 2038, 2005], [1814, 1903, 1966, 2085, 2198, 2354, 2555, 2760, 2902, 3035, 3250, 3337, 3425, 3694, 3998, 4056, 4002, 3930, 3753, 3440, 3227, 3093, 2843, 2709, 2607, 2481, 2386, 2180, 2179, 2091, 2048, 2030], [1828, 1942, 2007, 2108, 2239, 2366, 2484, 2619, 2847, 3104, 3423, 3712, 3694, 3613, 3724, 4015, 4294, 4043, 3679, 3414, 3122, 3009, 2812, 2693, 2592, 2583, 2524, 2354, 2215, 2160, 2114, 2039], [1838, 1949, 2027, 2118, 2286, 2433, 2595, 2710, 2950, 3272, 3561, 3707, 3553, 3387, 3661, 3780, 3975, 3811, 3617, 3366, 3173, 3066, 2852, 2708, 2605, 2492, 2444, 2356, 2244, 2148, 2095, 2066], [1824, 1936, 2060, 2165, 2293, 2421, 2570, 2683, 2876, 3111, 3314, 3377, 3256, 3282, 3496, 3567, 3670, 3625, 3467, 3278, 3138, 2997, 2784, 2650, 2524, 2431, 2390, 2337, 2232, 2138, 2062, 2040], [1801, 1904, 1993, 2125, 2325, 2415, 2538, 2617, 2714, 2859, 2958, 3028, 3048, 3198, 3233, 3247, 3338, 3300, 3201, 3085, 2994, 2866, 2795, 2600, 2500, 2412, 2359, 2298, 2205, 2098, 2016, 1992], [1745, 1913, 2054, 2077, 2209, 2351, 2481, 2501, 2552, 2698, 2756, 2870, 2883, 2941, 2968, 3173, 3100, 3089, 2987, 2927, 2849, 2797, 2659, 2515, 2450, 2371, 2313, 2245, 2180, 2088, 2023, 1987], [1793, 1820, 1903, 1984, 2104, 2218, 2283, 2342, 2418, 2512, 2570, 2632, 2697, 2729, 2751, 2877, 2828, 2943, 2927, 2745, 2662, 2607, 2563, 2449, 2356, 2293, 2248, 2185, 2127, 2073, 2027, 1973], [1704, 1801, 1854, 1962, 2017, 2098, 2160, 2190, 2301, 2367, 2426, 2494, 2517, 2500, 2591, 2612, 2654, 2730, 2832, 2796, 2578, 2520, 2431, 2398, 2296, 2232, 2187, 2120, 2076, 2045, 2012, 1991], [1675, 1741, 1805, 1887, 1921, 2031, 2092, 2141, 2204, 2252, 2329, 2392, 2417, 2388, 2498, 2539, 2653, 2546, 2653, 2650, 2523, 2372, 2328, 2391, 2288, 2188, 2149, 2100, 2058, 2025, 2005, 1978], [1654, 1686, 1692, 1777, 1864, 1911, 2014, 2017, 2055, 2169, 2241, 2313, 2177, 2320, 2370, 2400, 2612, 2453, 2463, 2374, 2301, 2294, 2222, 2270, 2235, 2132, 2086, 2041, 2006, 1976, 1941, 1941], [1572, 1574, 1666, 1717, 1798, 1817, 1895, 1927, 1998, 2063, 2097, 2088, 2144, 2220, 2253, 2268, 2250, 2224, 2377, 2293, 2227, 2204, 2143, 2179, 2186, 2028, 1986, 1968, 1955, 1942, 1905, 1881], [1511, 1568, 1618, 1672, 1736, 1747, 1801, 1830, 1870, 1922, 1960, 2012, 2060, 2127, 2148, 2145, 2123, 2090, 2219, 2161, 2128, 2105, 2061, 2078, 2118, 2076, 2001, 1932, 1902, 1887, 1865, 1844], [1551, 1639, 1643, 1666, 1747, 1674, 1716, 1761, 1753, 1800, 1926, 2002, 2037, 2073, 2086, 1988, 1971, 1970, 2053, 2034, 2035, 2030, 2009, 1969, 1993, 2026, 2059, 1889, 1850, 1836, 1831, 1822], [1634, 1615, 1630, 1630, 1674, 1655, 1657, 1689, 1733, 1816, 1914, 1992, 1997, 2027, 2084, 1916, 1897, 1915, 1974, 1968, 1969, 1983, 1978, 1945, 1912, 1880, 1865, 1844, 1830, 1833, 1824, 1815], [1506, 1585, 1552, 1581, 1642, 1566, 1590, 1610, 1645, 1780, 1698, 1870, 1930, 1807, 1745, 1746, 1791, 1800, 1840, 1864, 1888, 1898, 1911, 1908, 1879, 1855, 1844, 1834, 1821, 1819, 1813, 1812], [1406, 1456, 1518, 1509, 1480, 1495, 1525, 1551, 1570, 1574, 1587, 1644, 1744, 1695, 1654, 1680, 1705, 1742, 1772, 1779, 1829, 1846, 1849, 1856, 1854, 1843, 1837, 1836, 1896, 1917, 1932, 1919], [1383, 1377, 1391, 1437, 1419, 1438, 1473, 1485, 1501, 1492, 1475, 1488, 1527, 1572, 1601, 1634, 1655, 1687, 1701, 1758, 1778, 1796, 1796, 1812, 1843, 1846, 1866, 1938, 2123, 2122, 2065, 2059]]

ele_grid = [[1,1,1,1,1],[1,1,2,1,1],[1,2,3,2,1],[1,2,2,2,1],[2,1,1,1,2]]

def alpha(grid):
    xy_grid=grid
    high_color  = "red"
    low_color   = "purple"
    color_map   = map_create(xy_grid, high_color, low_color)

# Takes xy_grid, creates color-scaled topo map. 
def map_create(xy_grid, high_color, low_color):
    min_ele, max_ele = min_and_max(xy_grid)  
    increment   = gradient_scaler(min_ele, max_ele)
    RGB_list    = gradient_creator(low_color, high_color)
    img         = Image.new('RGB', (len(xy_grid[0]), len(xy_grid)))
    print("peepee", type(xy_grid[0][0]))
    for rownum in range(0, len(xy_grid)-1):
        for pos in range(0, len(xy_grid[0]-1)):
            curr_ele = ele_at_coords(pos, rownum)
    return "img"     

# Returns overall max and min values in whole map. 
# Used to scale color scheme. 
def min_and_max(xy_grid):
    temp_minlist = []
    temp_maxlist = []
    for row in range(0, len(xy_grid)-1):
        temp_minlist.append(min(xy_grid[row]))
        temp_maxlist.append(max(xy_grid[row]))
    min_ele = min(temp_minlist)     
    max_ele = max(temp_maxlist)     
    return(min_ele, max_ele)


# Takes range of elevations, scales to 256 increments for coloring.
def gradient_scaler(min_ele, max_ele):
    range = max_ele - min_ele
    print ('Gradient Scaled. Range:', range)
    return(range/256)


# Given highest and lowest color, creates spectrum btwn 2
# with 256 colors (in list form).
def gradient_creator(high_color, low_color):
    start_col = Color(low_color) 
    stop_col  = Color(high_color) 
    hex_colors = list(start_col.range_to(Color(stop_col), 258)) #258 bc we delete first and final elements to make 256
    RGB_list = []
    for i in range(1,256): # do this instead of 0,255 to eliminate first and last colors in list - they are a different format.
        curr_col = hex_colors[i]
        curr_col = ImageColor.getcolor(f"{curr_col}", "RGB")
        RGB_list.append(curr_col)
    # print("RGB_ list check", RGB_list)    
    return RGB_list


# Given (x, y) coordinates, return elevation at those coordinates. 
def ele_at_coords(pos, rownum):
    print("line 103", int(xy_array[rownum][pos]))
    return (xy_array[rownum][pos])

def ele_to_col_val(min_ele, curr_ele, increment):
    # col_val = int((curr_ele - min_ele)*(1/increment))
    col_val = int(round(curr_ele - min_ele)*(1/increment))
    return col_val  

alpha(ele_grid) 